(slice) get_address () asm "MYADDR";
(int, int) parse_address (slice) asm "REWRITESTDADDR";
;; (int) gas_to_gram (int) asm "GASTOGRAM";
(builder) builder_stub () asm "NULL";
(int) gas_to_gram (int gas) inline { return gas * 10000; }

(int, cell, int, cell, cell, cell) load_data () inline {
  var cs = get_data().begin_parse();
  (int init, 
   cell description,
   cell balances, 
   int gas_per_send, 
   cell pending_queries,
   cell gas_providers) = (cs~load_int(1),
                          cs~load_ref(), 
                          cs~load_dict(), 
                          cs~load_grams(), 
                          cs~load_dict(),
                          cs~load_dict());
  return (init, balances, gas_per_send, pending_queries, description, gas_providers); 
}

() save_data (cell balances, int gas_per_send, cell pending_queries, cell description, cell gas_providers) impure inline {
  cell storage = begin_cell().store_int(-1, 1)
                             .store_ref(description)
                             .store_dict(balances)
                             .store_grams(gas_per_send)
                             .store_dict(pending_queries)
                             .store_dict(gas_providers)
                 .end_cell();
  set_data(storage);
}


int get_uniq_token () inline {
  ;; TODO problem with this way of uniq_token calculation
  ;; is that for contracts on different workchains but with
  ;; the same address it gives the same token.
  ;; Probably slice_hash(get_address())>>192 should be used instead
  ;; Gas price should be checked as well, may be it is cheaper
  ;; to load/store uniq_token
  (int wc, int hsh) = parse_address(get_address());
  return (hsh >> 192);
}

(cell, ()) ~remember_query(cell pending_queries, int query_id) inline {
  pending_queries~udict_set_builder(64, query_id, begin_cell());
  return (pending_queries, ());
}

(cell, (int)) ~clean_expired_queries(cell pending_queries, int bound) inline {
  bound -= (64 << 32);   ;; clean up records expired more than 64 seconds ago
  int need_save = 0;
  do {
    var (pending_queries', i, _, f) = pending_queries.udict_delete_get_min(64);
    f~touch();
    if (f) {
      f = (i < bound);
    }
    if (f) {
      pending_queries = pending_queries';
      need_save = -1;
    }
  } until (~ f);
  return (pending_queries, (need_save));
}

(cell, ()) ~decrease_balance(cell balances, int user_id, int amount) inline {
  (slice user_balance_cell, int user_found) = balances~udict_delete_get?(256, user_id);
  ;; throw_unless(41, user_found); will be thrown automatically if user not found during load_grams
  int balance = user_balance_cell~load_grams();
  ;; throw_if(42, balance < amount); useless since if final balance less than 0 exception during grams storing will be raised
  balance -= amount;
  if(balance) {
    balances~udict_set_builder(256, user_id, begin_cell().store_grams(balance));
  }
  return (balances, ());
}

(cell, ()) ~increase_balance(cell balances, int user_id, int amount) inline {
  (slice user_balance_cell, int user_found) = balances.udict_get?(256, user_id);
  if(user_found) {
    int balance = user_balance_cell~load_grams();
    amount += balance;
    ;; throw_if(46, new_payee_balance > 18446744073709551615); useless since if final balance higher than 2^120 exception during grams storing will be raised
  }
  if(amount) {
    balances~udict_set_builder(256, user_id, begin_cell().store_grams(amount));
  }
  return (balances, ());
}

(cell, ()) ~insert_new_gas_provider(cell gas_providers, int nanograms_per_token, int provided_grams, int provider_id, int gas_amount_per_send) inline {
  throw_if(48, nanograms_per_token < 1);
  int nanogram_amount_per_send = gas_to_gram(gas_amount_per_send);
  throw_if(49, nanogram_amount_per_send < provided_grams);
  int bid_id = ((nanograms_per_token + 1) << 32) - 1;
  ifnot(gas_providers.dict_empty?()) {
    do {
      bid_id -= 1;
      (slice value, int found) = gas_providers.udict_get?(152, bid_id);
    } until ( ~ found );
  }
  gas_providers~udict_set_builder(152, bid_id, begin_cell().store_grams(provided_grams).store_uint(provider_id, 256) );
  return (gas_providers, ());
}

((cell, cell), (int)) pay_for_gas((cell, cell) providers_n_balances, int gas_amount) inline {  
  (cell gas_providers, cell balances) = providers_n_balances;
  int nanogram_amount = gas_to_gram(gas_amount);
  var (gas_providers, bid_id, provider_data, f) = gas_providers.udict_delete_get_max(152);
  throw_unless(50, f);
  (int provider_gram_balance, int provider_id) = (provider_data~load_grams(), provider_data~load_uint(256));
  int nanograms_per_token = bid_id >> 32;
  int token_amount = nanogram_amount * 1000000000 / nanograms_per_token ;
  provider_gram_balance -= nanogram_amount;
  ;; We just delete provider balances which are less than one send gas amount
  ;; otherwise attacker can cause very expensive search for suitable provider 
  if (provider_gram_balance > nanogram_amount) { 
    gas_providers~udict_set_builder(152, bid_id, begin_cell().store_grams(provider_gram_balance).store_uint(provider_id, 256) );
  }
  balances~increase_balance(provider_id, token_amount);
  return ((gas_providers, balances), (token_amount));
}

((cell, cell), ()) process_transfer_with_accept((cell, cell) providers_n_balances, int sender_id, int payee_id, int amount, int gas_amount) inline { 
  throw_if(52, payee_id == sender_id);    ;;There is no sense in supporting of such transfer, while it become too cumbersome

  ;; ========= Gas provider ==========
  (cell gas_providers, cell balances) = providers_n_balances;
  int nanogram_amount = gas_to_gram(gas_amount);
  var (gas_providers, bid_id, provider_data, f) = gas_providers.udict_delete_get_max(152);
  ;; throw_unless(50, f); will throw on loads
  (int provider_gram_balance, int provider_id) = (provider_data~load_grams(), provider_data~load_uint(256));
  int nanograms_per_token = bid_id >> 32;
  int fee_in_tokens = nanogram_amount * 1000000000 / nanograms_per_token ;
  provider_gram_balance -= nanogram_amount;

  ;; ========= Sender ==========
  (slice sender_balance_cell, int user_found) = balances~udict_delete_get?(256, sender_id);
  ;; throw_unless(41, user_found); will be thrown automatically if user not found during load_grams
  int sender_balance = sender_balance_cell~load_grams();
  ;; throw_if(42, balance < amount); useless since if final balance less than 0 exception during grams storing will be raised
  sender_balance -= amount + fee_in_tokens;

  ;; ========= Payee ==========
  (slice payee_balance_cell, int payee_found) = balances.udict_get?(256, payee_id);
  int payee_balance = amount;
  if(payee_found) {
    payee_balance += payee_balance_cell~load_grams();
    ;; throw_if(46, new_payee_balance > 18446744073709551615); useless since if final balance higher than 2^120 exception during grams storing will be raised
  }

  ;; ======= Checking id collusions ==========
  int replenish_provider_balance = -1;
  if(sender_id == provider_id) {
    replenish_provider_balance = 0;
    sender_balance += fee_in_tokens;
  } 
  if(payee_id == provider_id) {
    replenish_provider_balance = 0;
    payee_balance += fee_in_tokens;
  } 

  int provider_balance = fee_in_tokens;
  if(replenish_provider_balance) {
    ;; ========= Provider ==========
    (slice provider_balance_cell, int provider_found) = balances.udict_get?(256, provider_id);    
    if(provider_found) {
      provider_balance += provider_balance_cell~load_grams();
      ;; throw_if(46, new_payee_balance > 18446744073709551615); useless since if final balance higher than 2^120 exception during grams storing will be raised
    }
  }


  ;; ======= Builder generation ========
  builder sender_data = begin_cell().store_grams(sender_balance);
  builder payee_data = begin_cell().store_grams(payee_balance);
  builder provider_token_data = builder_stub();
  if(replenish_provider_balance) {
    provider_token_data = begin_cell().store_grams(provider_balance);
  }
  builder provider_gas_data = begin_cell().store_grams(provider_gram_balance).store_uint(provider_id, 256);

  accept_message();
  
  ;; ====== Storing builders ======
  
  if(sender_balance) {
    balances~udict_set_builder(256, sender_id, sender_data);
  }
  if(payee_balance) {
    balances~udict_set_builder(256, payee_id, payee_data);
  }
  if(replenish_provider_balance) {
    balances~udict_set_builder(256, provider_id, provider_token_data);
  }
  ;; We just delete provider balances which are less than one send gas amount
  ;; otherwise attacker can cause very expensive search for suitable provider 
  if (provider_gram_balance > nanogram_amount) { 
    gas_providers~udict_set_builder(152, bid_id, begin_cell().store_grams(provider_gram_balance).store_uint(provider_id, 256) );
  }
  return ((gas_providers, balances), ());
}

() recv_external (slice in_msg) {
  (int init, cell balances, int gas_per_send, cell pending_queries, cell description, cell gas_providers) = load_data();
  ifnot(init) {
    accept_message();
    save_data(balances, gas_per_send, pending_queries, description, gas_providers);
    return ();
  }
  slice signature = in_msg~load_bits(512);
  slice cs = in_msg;
  (int query_id, int op, int pubkey, int uniq_token) = (cs~load_uint(64), cs~load_uint(8), cs~load_uint(256), cs~load_uint(64));
  var bound = (now() << 32);
  throw_if(33, query_id < bound);  
  throw_if(35, query_id > (bound + 281474976710656)); ;; Do not process orders which should be stored too long
  ;; 281474976710656 = 2**48 = 65536 * 2**32 ~ 18 hours

  int order_hash = slice_hash(in_msg);
  throw_unless(34, check_signature(order_hash, signature, pubkey));
  throw_unless(44, uniq_token == get_uniq_token());  
  (_, int has_query) = pending_queries.udict_get?(64, query_id);
  throw_if(47, has_query);
  if( op == 0 ) { ;; simple send
    int sender_id = pubkey; ;; just alias
    cs = cs~load_ref().begin_parse();
    (int amount, int payee_id) = (cs~load_grams(), cs~load_uint(256));
    ;; Unfortunately it consumes too much gas
    ;;int fee = (gas_providers, balances)~pay_for_gas(gas_per_send);
    ;;balances~decrease_balance(sender_id, amount + fee);
    ;;balances~increase_balance(payee_id, amount);
    ;;accept_message();  
    (gas_providers, balances)~process_transfer_with_accept(sender_id, payee_id, amount, gas_per_send);
    pending_queries~remember_query(query_id);
    pending_queries~clean_expired_queries(bound);
    save_data(balances, gas_per_send, pending_queries, description, gas_providers);     
  }
}

() recv_internal (int msg_value, cell in_msg_cell, slice in_msg) {
;;
}

(int) balanceOf (int user_id) method_id {
  (int init, cell balances, int gas_per_send, cell pending_queries, cell description, cell gas_providers) = load_data();
  (slice user_balance_cell, int user_found) = balances.udict_get?(256, user_id);
  ifnot(user_found) {
    return 0;
  }
  return user_balance_cell~load_grams();
}
